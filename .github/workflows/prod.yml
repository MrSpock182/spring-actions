name: Deploy Application
on:
  push:
    branches: [main]

jobs:
  security:
    name: Security
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/maven@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=critical

  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: security
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          APP_NAME: ${{ secrets.APP_NAME }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=MrSpock182_spring-actions
      - name: Check SonarQube results
        run: |
          SONAR_URL="https://sonarcloud.io/api/measures/component?componentKey=MrSpock182_spring-actions"
          CODE_SMELL=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: "$SONAR_URL&metricKeys=code_smells" | jq -r '.component.measures[0].value')
          if [ "$CODE_SMELL" -gt 10 ]; then
            echo "Aplicação com mais de 10 code small."
            exit 1
          fi
          DUPLICATED=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: "$SONAR_URL&metricKeys=duplicated_lines_density" | jq -r '.component.measures[0].value')
          if (( $(echo "DUPLICATED > 3.0" | bc -l) )); then
            echo "Aplicação com mais de 3% de duplicação de código."
            exit 1
          fi
          NUM_BUGS=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: "$SONAR_URL&metricKeys=bugs" | jq -r '.component.measures[0].value')
          if [ "$NUM_BUGS" -gt 2 ]; then
            echo "Aplicação contem mais de 2 bugs."
            exit 1
          fi
          COVER=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: "$SONAR_URL&metricKeys=coverage" | jq -r '.component.measures[0].value')
          if (( $(echo "COVER > 80.0" | bc -l) )); then
            echo "Aplicação com menos de 80% de coverage."
            exit 1
          fi


  build:
    name: Build
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
      - name: Build Project
        run: mvn clean install -DskipTests
      - name: Login Dockerhub
        run: docker login -u ${{secrets.DOCKERHUB_USER}} -p ${{secrets.DOCKERHUB_PASSWORD}}
      - name: Build docker image
        run: docker build -t mrspock182/actions .
      - name: Push image docker
        run: docker push mrspock182/actions

  deploy:
    name: Deploy
    needs: build
    runs-on: self-hosted
    steps:
      - name: Pull image from docker hub
        run: docker pull mrspock182/actions:latest
      - name: Remove docker container
        run: docker rm -f actions
      - name: Run docker container
        run: docker run -d -p 8080:8080 -e APP_NAME='${{secrets.APP_NAME}}' --name actions mrspock182/actions